import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
//import Link from "next/link";
import React from "react";
//import { useRef } from "react";
import { api } from "~/utils/api";
import {Input} from "../components/ui/input"

export default function Home() {
  //const hello = api.post.hello.useQuery({ text: "from tRPC" });

  return (
    <div>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <header className="flex justify-between items-center p-5 bg-blue-500 text-white">
          <h1 className="text-xl">Welcome to T3 Checklist</h1>

          <AuthShowcase />
    
        </header>
       
        <TaskManager />
        
      </main>
      
    </div>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.post.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}

const TaskManager: React.FC = () => {
  const { data: sessionData } = useSession();
  const [task, setTask] = React.useState(""); // State to hold the input value

  // Fetch tasks
  const { data: tasks, refetch: refetchTasks } = api.task.getAll.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );
  

  // Create task mutation
  const createTask = api.task.create.useMutation({
    onSuccess: () => {
      void refetchTasks(); // Refetch tasks after a successful creation

    }
  });
  // Handle input change
  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setTask(event.target.value);
  };

  // Handle submit
  const handleSubmit = () => {
    void createTask.mutate({
      title: task
    });
    setTask(""); // Clear input after submission
  };

  return (
    <div>
      <div>
        <Input 
          type="text" // Changed from "task" to "text" as "task" is not a valid input type
          placeholder="Task" 
          value={task} 
          onChange={handleInputChange}
        />
        <button onClick={handleSubmit}>Submit</button>
      </div>
      <div>
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Task</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {/* optional chaining is good */}
            {/* remap cpas lock to control */}
            {/* command p, ctrl tilda, command shift bracket */}
            {tasks?.map((task, index) => (
              <tr key={index}>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{task.title}</td>
        
              </tr>
            ))}
          </tbody>
      </table>


      </div>
    </div>
  );
};