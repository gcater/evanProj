import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
// import Link from "next/link";
import React, { useState } from "react";
import { api } from "~/utils/api";

export default function Home() {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <header className="flex justify-between items-center p-5 bg-blue-500 text-white">
          <h1 className="text-xl">Welcome to T3 Checklist</h1>
          <AuthShowcase />
        </header>
        <TaskManager/>
      </main>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.post.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}



const TaskManager: React.FC = () => {
  const { data: sessionData } = useSession();
  const [task, setTask] = useState(""); // State to hold the input value

  // Fetch tasks
  const { data: tasks, refetch: refetchTasks } = api.task.getAll.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  // Create task mutation
  const createTask = api.task.create.useMutation({
    onSuccess: () => {
      void refetchTasks(); // Refetch tasks after a successful creation
    },
  });

  // Handle input change
  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setTask(event.target.value);
  };

  // Handle submit
  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    void createTask.mutate({
      title: task,
    });
    setTask(""); // Clear input after submission
  };

  // Delete task mutation
  const deleteTask = api.task.delete.useMutation({
    onSuccess: () => {
      void refetchTasks(); // Refetch tasks after a successful deletion
    },
  });

  // Handle delete
  const handleDelete = (taskId: string) => {
    void deleteTask.mutate({
      id: taskId,
    });
  };

  return (
    <div>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Task"
          value={task}
          onChange={handleInputChange}
        />
        <button type="submit">Submit</button>
      </form>
      <div>
        {tasks?.map((task) => (
          <div key={task.id}>
            <span>{task.title}</span>
            <button onClick={() => handleDelete(task.id)}>Delete</button>
          </div>
        ))}
      </div>
    </div>
  );
};


